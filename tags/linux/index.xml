<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Libre's Blog</title><link>https://www.libre.fun/tags/linux/</link><description>Recent content in Linux on Libre's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Libre. 本站遵循 CC-BY-NC 4.0 协议</copyright><lastBuildDate>Tue, 29 Oct 2019 14:30:09 +0800</lastBuildDate><atom:link href="https://www.libre.fun/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>WSL 设置开机启动项</title><link>https://www.libre.fun/posts/setup-startup-in-wsl/</link><pubDate>Tue, 29 Oct 2019 14:30:09 +0800</pubDate><guid>https://www.libre.fun/posts/setup-startup-in-wsl/</guid><description>在 WSL Ubuntu的安装和Troubleshooting 中，提到了WSL是一个阉割了部分功能的Linux，其中尤其是systemd的阉割，使得不能方便地通过systemctl enable &amp;lt;service_name&amp;gt;来把一个服务加入开机启动项内。
但是对于大部分使用WSL的人而言，无论是出于刚性需求（例如在WSL中运行一个Web服务器）、还是使用方便（随时通过SSH连接到WSL），都可能需要在WSL中加入开机启动项。具体方法如下所述。
本文阐述如何让一个WSL中的服务能够随Windows开机启动。以ssh服务为例，该服务在WSL Ubuntu 18.04 LTS发行版中自带，但安装好后不会开机启动。
在WSL中写好启动项脚本 echo -e &amp;#34;#! /bin/bash\n/etc/init.d/ssh start&amp;#34; | tee -a /etc/init.wsl chmod +x /etc/init.wsl echo &amp;#34;%sudo ALL=(ALL) NOPASSWD: /etc/init.wsl&amp;#34; | tee -a /etc/sudoers 上面的命令做了三件事：
在/etc目录下生成名为init.wsl的文件，并向其中写入以下两行内容：
#! /bin/bash /etc/init.d/ssh start 第一行向系统声明该脚本需要/bin/bash来执行，第二行则是执行ssh的启动脚本。
如果你有其他服务需要开机启动，使用vim编辑/etc/init.wsl，并将下面命令中的&amp;lt;service_name&amp;gt;替换成需要的服务名即可，该服务需要在/etc/init.d目录下存在：
/etc/init.d/&amp;lt;service_name&amp;gt; start 赋予/etc/init.wsl脚本可执行权限
在/etc/sudoers文件中声明：执行/etc/init.wsl脚本不需要输入密码
在Windows中添加开机启动脚本 由于WSL说到底还是Windows内置的一个“服务”，或者说是“组件”，因此对它的一些操作还是免不了要从Windows本身进行。
按下「Win + R」，输入shell:startup后回车，打开启动项文件夹。新建一个名为WhateverYouLike.vbs的文件，并使用记事本或者VSCode打开它，输入以下内容：
Set ws = CreateObject(&amp;quot;Wscript.Shell&amp;quot;) ws.run &amp;quot;bash -c &amp;quot;&amp;quot;sudo /etc/init.wsl&amp;quot;&amp;quot;&amp;quot;, vbhide 我对VB脚本语言不太了解，但是大概能理解这两句的含义。
第一句创建了一个可以执行命令的对象，命名为ws；第二句调用了该对象的run方法，执行了一句windows内的命令：</description></item><item><title>WSL 的安装和一些 Troubleshooting</title><link>https://www.libre.fun/posts/install-wsl-and-troubleshooting/</link><pubDate>Tue, 29 Oct 2019 12:50:09 +0800</pubDate><guid>https://www.libre.fun/posts/install-wsl-and-troubleshooting/</guid><description>什么是WSL WSL中文全称为「适用于 Linux 的 Windows 子系统」（Windows Subsystem for Linux），是一个为在Windows 10和Windows Server 2019上能够原生运行Linux二进制可执行文件（ELF格式）的兼容层。
WSL相比于VMware等虚拟机解决方案更加轻量，启动速度更快，但代价是阉割了一些Linux系统的功能，例如systemd、Ubuntu中的snapd等（截止本文写作时）。但是对于一般Linux用户的使用是足够的。
WSL的启用 在默认设置下，WSL是被关闭的，因此，首先需要在系统中开启WSL，有以下两种方式：
通过图形界面启用WSL Windows「设置」➡「应用」➡「程序和功能」➡「启用或关闭Windows功能」，勾选「适用于 Linux 的 Windows 子系统」
确定之后重启系统。
通过命令行启用WSL 右键单击「开始菜单」➡「Windows Powershell （管理员）」，打开Powershell后运行以下命令：
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 开始下载相关数据，下载完成后输入「yes」重启系统。
WSL的安装 在Windows中启用WSL之后，就可以安装你想使用的Linux发行版了，然而，这也要官方提供了相应的安装包才行。
安装WSL同样有两种方式，一种是通过Microsoft Store安装，另一种是下载相应的应用包之后手动安装。鉴于Microsoft Store在网络方面的表现非常不稳定，推荐手动安装。
手动安装👍 因为一些其他的原因，我之前就卸载了Microsoft Store，所以这里选择手动安装。根据官方文档，首先下载Ubuntu 18.04的Appx包，方便起见，将其重命名为ubuntu18.04.Appx：
假设下载好的包位于D:\Download文件夹下，打开Powershell，运行以下命令即可安装：
cd D:\Download Add-AppxPackage .\ubuntu18.04.Appx 通过Microsoft Store安装👎 进入Microsoft Store，搜索「Linux」，会出现官方提供的安装包，如下图所示（电脑上卸载了Microsoft Store，所以用网页版的截图代替一下）：
选择你想要的版本进行安装，我这里选择了Ubuntu 18.04 LTS。
WSL的运行 安装好之后就可以进入系统了，同样地，可以通过在CMD或则Powershell输入ubuntu1804.exe直接在当前窗口进入WSL Ubuntu，也可以在开始菜单中找到新添加的Ubuntu 18.04打开。
安装之后初次运行需要一些初始化的时间，需要等待一下。WSL默认有一个root用户，但初次运行通常会要求你添加一个新用户，按照提示输入用户名和密码即可，该用户会被自动成为sudoer。如遇到提示「Permission Denied」或需要以root身份运行某些命令时，在命令前加上sudo即可。
Troubleshooting WSL如何重启 参考：Rebooting Ubuntu on Windows without rebooting Windows?</description></item><item><title>Ubuntu 18.04.3 各类代理配置</title><link>https://www.libre.fun/posts/vmware-ubuntu-proxy-configure/</link><pubDate>Tue, 15 Oct 2019 16:54:57 +0800</pubDate><guid>https://www.libre.fun/posts/vmware-ubuntu-proxy-configure/</guid><description>本文主要阐述在Ubuntu系统中为一些软件配置代理的方法，包括APT、Snap、Git、Bash命令行以及Ubuntu系统层面的HTTP代理。
准备工作 实验环境 本文中，笔者在VMware虚拟机中安装了Ubuntu系统，网络连接使用NAT模式。就代理的配置方式而言，无论虚拟机还是物理机都是通用的，区别只在于代理IP有所不同。在物理机上配置代理，只需要知道代理软件的IP（记作PROXY_IP）和端口（本文中默认使用1080）。
虚拟机使用NAT模式连接网络 如果你是在虚拟机中安装了Ubuntu系统，则需要确认其网络访问方式为NAT。打开VMware，右键点击左侧「库」面板中安装好的虚拟机，进入「网络适配器」查看网络连接模式，将其设置为「NAT模式」，如下图所示
代理工具的准备 由于众所周知的原因，必须借助某些代理软件才能够实现对外网的流畅访问。
在SS或者SSR中，需要打开“允许来自局域网的连接”(SSR-windows 4.9.2)或者“允许其他设备连入”(SS-windows 4.1.7)等类似的选项。该选项的名称可能会根据代理软件版本的不同而有细微的差别。
在宿主机上安装XShell （可选） XShell是一个用于SSH连接到主机的工具，这里推荐安装和使用。如果没有使用过这类工具的用户可以略过。
确认代理IP地址 在虚拟机方案中，通常是宿主机上运行代理软件，然后配置虚拟机Ubuntu系统的代理，从而使Ubuntu正常访问外网。此时则需要查看宿主机的IP地址。
以Windows为例，按下「Win+R」，输入cmd并按下回车，打开Windows命令提示符。
输入ipconfig，在「以太网适配器 VMware Network Adapter VMnet8」中查看IPv4地址，通常以172.16/17/18或者192.168开头。
VMware Network Adapter VMnet8 是VMware中使用NAT模式的虚拟机专用的网络适配器。
将该IP地址记为PROXY_IP，即我们需要的代理IP地址。后文中将始终使用PROXY_IP。读者在实践时需要替换为自己查看到的IP地址。
确认代理端口号 一般来讲，如果没有做过更改，SS和SSR使用的代理端口号都是1080。所以本文的命令中都会使用1080这个端口号。
确认系统权限 本文中使用的部分命令需要root权限，如果在root账户下，则可以直接执行命令；如果是在普通账户下，需要在命令前加上sudo关键字。
APT代理配置 参考：How to Set the Proxy for APT on Ubuntu 18.04
APT是Ubuntu系统内常用的软件包管理器，为APT配置代理之后能够保证一些软件可以正常安装，安装速度通常也会有一定的提升。
给APT配置代理的步骤如下：
$ sudo apt install vim # 该命令是为了安装Vim编辑器，Ubuntu不自带Vim；如果已安装，则可以忽略这一条 $ sudo vim /etc/apt/apt.conf.d/proxy.conf # 此时会创建并打开一个名为proxy.conf的文件，按下I进入编辑模式，输入以下几行 Acquire { HTTP::proxy &amp;#34;http://PROXY_IP:1080&amp;#34;; HTTPS::proxy &amp;#34;http://PROXY_IP:1080&amp;#34;; } # 输入后按下Esc，然后输入:wq，按下回车即可保存退出 打开代理软件（SS或者SSR）的流量监控，使用apt-get install命令安装任意一个包，查看下载速度并和宿主机上的流量监控数据进行对照，如果速度接近，即说明代理配置成功。</description></item><item><title>CentOS 7.6 Minimal Installation 后无法连接网络</title><link>https://www.libre.fun/posts/fix-network-connection-of-centos-with-mininal-installation/</link><pubDate>Sat, 05 Oct 2019 12:53:00 +0800</pubDate><guid>https://www.libre.fun/posts/fix-network-connection-of-centos-with-mininal-installation/</guid><description>问题原因 在安装CentOS 7.6系统时，图形安装界面的部分有一个配置网络的选项，进去之后可以开启网卡，而Minimal Installation默认是不开启网卡的，因此如果在安装系统时由于疏忽忘记打开网卡，进入系统之后会发现无法联网，所有和网络有关的操作都会报错。
解决方法 首先通过命令nmcli d查看网卡启用状态：
[libre@localhost ~]$ nmcli d DEVICE TYPE STATE CONNECTION ens33 ethernet disconnected -- lo loopback unmanaged -- 发现网卡的确是未启用。然后编辑文件/etc/sysconfig/network-scripts/ifcfg-ens&amp;lt;num&amp;gt;，此处的&amp;lt;num&amp;gt;在每台机器可能不一样，使用Tab自动补全即可。
将该文件最后一行的ONBOOT=NO改为ONBOOT=YES，然后保存退出，再通过以下命令重启网络：
service network restart 此时再查看网卡状态：
[libre@localhost ~]$ nmcli d DEVICE TYPE STATE CONNECTION ens33 ethernet connected ens33 lo loopback unmanaged -- 搞定。</description></item></channel></rss>