<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WSL on Libre's Blog</title><link>https://www.libre.fun/tags/wsl/</link><description>Recent content in WSL on Libre's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>Libre. 本站遵循 CC-BY-NC 4.0 协议</copyright><lastBuildDate>Tue, 29 Oct 2019 14:30:09 +0800</lastBuildDate><atom:link href="https://www.libre.fun/tags/wsl/index.xml" rel="self" type="application/rss+xml"/><item><title>WSL 设置开机启动项</title><link>https://www.libre.fun/posts/setup-startup-in-wsl/</link><pubDate>Tue, 29 Oct 2019 14:30:09 +0800</pubDate><guid>https://www.libre.fun/posts/setup-startup-in-wsl/</guid><description>在 WSL Ubuntu的安装和Troubleshooting 中，提到了WSL是一个阉割了部分功能的Linux，其中尤其是systemd的阉割，使得不能方便地通过systemctl enable &amp;lt;service_name&amp;gt;来把一个服务加入开机启动项内。
但是对于大部分使用WSL的人而言，无论是出于刚性需求（例如在WSL中运行一个Web服务器）、还是使用方便（随时通过SSH连接到WSL），都可能需要在WSL中加入开机启动项。具体方法如下所述。
本文阐述如何让一个WSL中的服务能够随Windows开机启动。以ssh服务为例，该服务在WSL Ubuntu 18.04 LTS发行版中自带，但安装好后不会开机启动。
在WSL中写好启动项脚本 echo -e &amp;#34;#! /bin/bash\n/etc/init.d/ssh start&amp;#34; | tee -a /etc/init.wsl chmod +x /etc/init.wsl echo &amp;#34;%sudo ALL=(ALL) NOPASSWD: /etc/init.wsl&amp;#34; | tee -a /etc/sudoers 上面的命令做了三件事：
在/etc目录下生成名为init.wsl的文件，并向其中写入以下两行内容：
#! /bin/bash /etc/init.d/ssh start 第一行向系统声明该脚本需要/bin/bash来执行，第二行则是执行ssh的启动脚本。
如果你有其他服务需要开机启动，使用vim编辑/etc/init.wsl，并将下面命令中的&amp;lt;service_name&amp;gt;替换成需要的服务名即可，该服务需要在/etc/init.d目录下存在：
/etc/init.d/&amp;lt;service_name&amp;gt; start 赋予/etc/init.wsl脚本可执行权限
在/etc/sudoers文件中声明：执行/etc/init.wsl脚本不需要输入密码
在Windows中添加开机启动脚本 由于WSL说到底还是Windows内置的一个“服务”，或者说是“组件”，因此对它的一些操作还是免不了要从Windows本身进行。
按下「Win + R」，输入shell:startup后回车，打开启动项文件夹。新建一个名为WhateverYouLike.vbs的文件，并使用记事本或者VSCode打开它，输入以下内容：
Set ws = CreateObject(&amp;quot;Wscript.Shell&amp;quot;) ws.run &amp;quot;bash -c &amp;quot;&amp;quot;sudo /etc/init.wsl&amp;quot;&amp;quot;&amp;quot;, vbhide 我对VB脚本语言不太了解，但是大概能理解这两句的含义。
第一句创建了一个可以执行命令的对象，命名为ws；第二句调用了该对象的run方法，执行了一句windows内的命令：</description></item><item><title>WSL 的安装和一些 Troubleshooting</title><link>https://www.libre.fun/posts/install-wsl-and-troubleshooting/</link><pubDate>Tue, 29 Oct 2019 12:50:09 +0800</pubDate><guid>https://www.libre.fun/posts/install-wsl-and-troubleshooting/</guid><description>什么是WSL WSL中文全称为「适用于 Linux 的 Windows 子系统」（Windows Subsystem for Linux），是一个为在Windows 10和Windows Server 2019上能够原生运行Linux二进制可执行文件（ELF格式）的兼容层。
WSL相比于VMware等虚拟机解决方案更加轻量，启动速度更快，但代价是阉割了一些Linux系统的功能，例如systemd、Ubuntu中的snapd等（截止本文写作时）。但是对于一般Linux用户的使用是足够的。
WSL的启用 在默认设置下，WSL是被关闭的，因此，首先需要在系统中开启WSL，有以下两种方式：
通过图形界面启用WSL Windows「设置」➡「应用」➡「程序和功能」➡「启用或关闭Windows功能」，勾选「适用于 Linux 的 Windows 子系统」
确定之后重启系统。
通过命令行启用WSL 右键单击「开始菜单」➡「Windows Powershell （管理员）」，打开Powershell后运行以下命令：
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 开始下载相关数据，下载完成后输入「yes」重启系统。
WSL的安装 在Windows中启用WSL之后，就可以安装你想使用的Linux发行版了，然而，这也要官方提供了相应的安装包才行。
安装WSL同样有两种方式，一种是通过Microsoft Store安装，另一种是下载相应的应用包之后手动安装。鉴于Microsoft Store在网络方面的表现非常不稳定，推荐手动安装。
手动安装👍 因为一些其他的原因，我之前就卸载了Microsoft Store，所以这里选择手动安装。根据官方文档，首先下载Ubuntu 18.04的Appx包，方便起见，将其重命名为ubuntu18.04.Appx：
假设下载好的包位于D:\Download文件夹下，打开Powershell，运行以下命令即可安装：
cd D:\Download Add-AppxPackage .\ubuntu18.04.Appx 通过Microsoft Store安装👎 进入Microsoft Store，搜索「Linux」，会出现官方提供的安装包，如下图所示（电脑上卸载了Microsoft Store，所以用网页版的截图代替一下）：
选择你想要的版本进行安装，我这里选择了Ubuntu 18.04 LTS。
WSL的运行 安装好之后就可以进入系统了，同样地，可以通过在CMD或则Powershell输入ubuntu1804.exe直接在当前窗口进入WSL Ubuntu，也可以在开始菜单中找到新添加的Ubuntu 18.04打开。
安装之后初次运行需要一些初始化的时间，需要等待一下。WSL默认有一个root用户，但初次运行通常会要求你添加一个新用户，按照提示输入用户名和密码即可，该用户会被自动成为sudoer。如遇到提示「Permission Denied」或需要以root身份运行某些命令时，在命令前加上sudo即可。
Troubleshooting WSL如何重启 参考：Rebooting Ubuntu on Windows without rebooting Windows?</description></item></channel></rss>